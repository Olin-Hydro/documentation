{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Onboarding for Hydroponics!","text":"<p>FAQs and Common Issues</p>"},{"location":"#what-is-hydroponics","title":"What is Hydroponics?","text":"<p>Hydroponics is the technique of growing plants using water-based nutrient solutions instead of soil. Hydroponics could be the future of agriculture (dare we say aquaculture) because of hydroponic gardens\u2019 compactness, fast growth, resistance to pests, and lower water consumption.</p>"},{"location":"#our-goals","title":"Our Goals","text":"<p>As a PInT subteam one of our primary goals is to help you learn and grow as individuals by doing. If you\u2019re not passionate about any of the existing subprojects that we\u2019re working on, then talk to your lead and we can find a fit for you.</p> <p>Automation\u2019s goal is to create a living garden; that is, a garden that can give itself more water or nutrient substrate when it\u2019s needed. We\u2019re implementing this using a microcontroller that should check plant metrics (pH, water content, etc.) and deliver the nutrients a plan needs to survive. We plan to allow the community to interact with the hydro wall without needing to be there in person, so we have designed an API and are constantly improving our API and frontend dashboard so that we provide a good user experience.</p>"},{"location":"#to-contribute","title":"To Contribute","text":"<p>Visit our Computational Setup and Install Packages pages, which detail how you can install the software you need to succeed on Hydroponics.</p> <p>Computational Setup - General</p> <p>Install Packages</p> <p>Our GitHub is organized into several subdirectories, each with a focus on one aspect of the Hydro automation workflow. You can view our GitHub here: https://github.com/Olin-Hydro.</p> <p>Let a lead know what you would like to work on and we\u2019ll invite you to collaborate!</p> <p>Questions from Documentation Review:</p> <ul> <li>Where is the DB hosted?</li> <li>Why is it hosted on MongoDB and not AWS when the API is hosted on AWS</li> <li>What does the architecture look like geographically?</li> <li>Mentorship?</li> <li>Include diagram in docs</li> <li>What is least clear about our platform?</li> <li>\u201cI feel like i have a better picture looking at this diagram, but there\u2019s a lot happening\u201d</li> <li>If i had to guess I would guess like the pH changed or something so that gardener sends commands to API and you send back configs to the local system</li> <li>Don\u2019t know what\u2019s happening with mother nature</li> <li>Can you guess what components are hosted on what services?</li> <li>Web-UI<ul> <li>React</li> </ul> </li> <li>Sensor Data<ul> <li>mongoDB</li> </ul> </li> <li>Data API<ul> <li>hosted on AWS lambda</li> <li>using Python</li> </ul> </li> <li>In short, yes!</li> <li>List specific projects for students to work on?</li> <li>if the student doesn\u2019t want to work on one of the existing projects, then they can come to you</li> <li>otherwise, list projects that they can work on</li> <li>FAQs and Common bugs page</li> <li>Node.js error that keeps happening with version mismatch</li> <li>How does our workflow look like? Need to write workflow\u2014PRs? Fork then push?</li> <li>Do an exercise and do code review that exercise to get used to workflow?</li> <li>They should be trying things themselves and in general not getting stuck (if they get stuck they can come to you but shouldn\u2019t realllllly need to)</li> <li>Have students try out our docs and figure out what we still need / would benefit from</li> </ul>"},{"location":"analogy_io/","title":"Understanding I/O Pins as Communication Channels: An Office Analogy","text":""},{"location":"analogy_io/#overview","title":"Overview","text":"<p>In microcontrollers like the Adafruit ESP32 Feather Board, I/O (Input/Output) pins serve as vital communication channels. To understand their role, let's consider an analogy with an office intercom system.</p>"},{"location":"analogy_io/#the-office-scenario","title":"The Office Scenario","text":"<ul> <li>The Office: Represents the microcontroller (Adafruit ESP32 Feather Board).</li> <li>Employees: Analogous to sensors or devices connected to the microcontroller.</li> <li>Office Intercom System: Symbolizes the I/O pins.</li> </ul>"},{"location":"analogy_io/#analogous-functions","title":"Analogous Functions","text":""},{"location":"analogy_io/#input-pins-receiving-information","title":"Input Pins (Receiving Information)","text":"<ul> <li>Analogy: Like an employee receiving instructions via the intercom.</li> <li>Microcontroller Context: Input pins receive signals or data from sensors or external devices, similar to receiving a message.</li> </ul>"},{"location":"analogy_io/#output-pins-sending-information","title":"Output Pins (Sending Information)","text":"<ul> <li>Analogy: Comparable to an employee sending out a message or report.</li> <li>Microcontroller Context: Output pins send signals or commands to other devices, much like broadcasting a message.</li> </ul>"},{"location":"analogy_io/#bidirectional-communication","title":"Bidirectional Communication","text":"<ul> <li>Analogy: Some employees both receive and send out information.</li> <li>Microcontroller Context: Certain pins can function as both input and output, allowing dynamic interactions.</li> </ul>"},{"location":"analogy_io/#key-points","title":"Key Points","text":""},{"location":"analogy_io/#controlled-and-specific","title":"Controlled and Specific","text":"<ul> <li>Analogy: Each employee has a specific intercom number.</li> <li>Microcontroller Context: Each I/O pin is designated for specific tasks, handling different types of signals.</li> </ul>"},{"location":"analogy_io/#limited-number","title":"Limited Number","text":"<ul> <li>Analogy: Limited lines in an intercom system.</li> <li>Microcontroller Context: A finite number of I/O pins necessitates efficient use and sometimes additional components like expanders.</li> </ul>"},{"location":"analogy_io/#programming-determines-function","title":"Programming Determines Function","text":"<ul> <li>Analogy: The role of each employee is determined by their job description.</li> <li>Microcontroller Context: The role of each pin is set by how the microcontroller is programmed.</li> </ul>"},{"location":"analogy_io/#conclusion","title":"Conclusion","text":"<p>This analogy helps conceptualize I/O pins as distinct communication channels within a microcontroller system, each playing a unique and programmable role in the interaction between the controller and its connected components. If you still want to learn more, here is the official explanation(more technical/application-based) and lecture notes by Stanford(more theoretical).</p>"},{"location":"computational_setup/","title":"Computational Setup","text":"<p>For this computational setup, we\u2019ll be using Ubuntu as our operating system. This requires dual booting on Windows 11 with Ubuntu 22.04 LTS</p>  \ud83d\udcdd *This guide is mainly written for Ubuntu users so you may encounter issues otherwise*   <p>Setup for Windows</p>"},{"location":"computational_setup/#installing-ubuntu","title":"Installing Ubuntu","text":"<ol> <li> <p>Make partition for installing the OS</p> </li> <li> <p>Go to your disk management tool on windows.</p> </li> <li>Select your biggest partition (by default the C drive)</li> <li>Click \u201cShrink Volume\u201d</li> <li>Shrink 50gb \u2192 go to IT if the shrink fails</li> <li> <p>Create a new partition</p> </li> <li> <p>Acquire a bootable USB that has the Ubuntu image</p> </li> <li> <p>Restart the computer and enter BIOS settings (Press F2)</p> </li> <li> <p>Select the USB with Ubuntu image as the primary boot loader</p> </li> <li>Disable Secure Boot if enabled</li> <li> <p>Save and exit</p> </li> <li> <p>When the computer starts again, select \u201cTry/Install Ubuntu\u201d</p> </li> <li> <p>Stick to the default settings EXCEPT the partition to install Ubuntu on</p> </li> <li>Make sure that the selected partition matches the size of the partition you created earlier</li> <li>Continue until the installation finishes</li> </ol>"},{"location":"computational_setup/#install-vscode","title":"Install VSCode","text":"<ul> <li>Download and install VSCode for respective OS</li> </ul>"},{"location":"computational_setup/#github-setup","title":"GitHub Setup","text":"<ul> <li>First make an account if you haven\u2019t already!</li> <li>Tell me (@dedeisnerd on discord) your GitHub username</li> <li>I\u2019ll add you to the Olin-Hydro organization on GitHub</li> </ul>"},{"location":"computational_setup/#github-ssh-setup","title":"GitHub SSH Setup","text":"\ud83d\udcdd SSH lets you authenticate yourself without having to login to GitHub every single time with username and password. SSH key will be a unique key for your machine, which will be added to your GitHub account \u2014 GitHub will then recognize your machine to your user account.   <ol> <li>Create an SSH key on your local machine</li> </ol> <p><code>ssh-keygen -t ed25519 -C \"your_email@example.com\"</code></p> <ol> <li>Add that key to your local ssh key agent</li> </ol> <p><code>eval \"$(ssh-agent -s)\"</code> <code>ssh-add ~/.ssh/id_ed25519</code></p> <ol> <li>Add that key to your GitHub account</li> </ol> <p><code>cat ~/.ssh/id_ed25519.pub</code></p> <p>\u2192 Running the line above will return a long string of alphabets and numbers, followed by a space and the email that you entered. Copy the content of this key file by dragging the string and pressing <code>Ctrl+Shift+C</code> (<code>Ctrl+C</code> will not work on Ubuntu terminal).</p> <ul> <li>Now, go to your GitHub account settings. Click on the \u201cSSH and GPG keys.\u201d</li> <li>Click \u201cNew SSH key or Add SSH key\u201d</li> <li>Paste the copied key</li> <li>Give it a descriptive name, like \u201cOlin Laptop Ubuntu\u201d</li> <li> <p>Click \u201cAdd SSH key\u201d</p> </li> <li> <p>Confirm the authentication   <code>ssh -T git@github.com</code>   \u2192 Running this command should say something like \u201cyou have authenticated.\u201d</p> </li> </ul> <p>More information from GitHub: https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</p>"},{"location":"computational_setup/#git-setup","title":"Git Setup","text":""},{"location":"computational_setup/#configuring-git-for-you","title":"Configuring Git for you","text":"<ul> <li>Run the command\u00a0<code>git config --global user.name \"Alan Turing\"</code>, substituting your name for\u00a0<code>Alan Turing</code>\u00a0(but leaving the quotes in place).</li> <li>To set your email, run\u00a0<code>git config --global user.email \"alan@turing.org\"</code>, substituting your GitHub email address for\u00a0<code>alan@turing.org</code>. It\u2019s important that your email match the one that GitHub has, because a mismatch can make Git fail in unintuitive ways.</li> <li>To set Git to use VS Code, run\u00a0<code>git config --global core.editor \"code --wait\"</code>. Again, leave the quotes in place.</li> <li>If you mistyped anything in quotes (your name, email, or\u00a0<code>code --wait</code>) you can run that command again with the correct name/email to fix the typo. If you mistyped\u00a0<code>user.name</code>,\u00a0<code>user.email</code>, or\u00a0<code>core.editor</code>\u00a0in the commands, you can use\u00a0<code>git config --unset user.name</code>\u00a0(replacing\u00a0<code>user.name</code>\u00a0with whatever you mistyped earlier) to remove that setting, and try again.</li> </ul> <p>The information above was taken from Configuring Git section of Olin\u2019s SoftDes website:</p> <p>Computational Setup Instructions</p>"},{"location":"computational_setup/#install-anaconda","title":"Install Anaconda","text":"<p>*Anaconda is a package manager and it will save you from having dependency errors when working with complex packages. Rule of thumb is to always try to use the same package installer. Installation link</p> <p>If you\u2019re using Ubuntu or MacOS, once you\u2019ve downloaded the program, run:</p> <pre><code># Change the directory to where the download is!\n$ bash ~/Downloads/&lt;Anaconda3-some-version-xx&gt;.sh\n</code></pre>"},{"location":"onboarding_electrical/","title":"Hydroponic System Onboarding Tutorial","text":"<p>Welcome to your onboarding! This document will guide you through the initial steps of setting up your hydroponic system. During the onboarding, you should be provided with the following items:</p> <ul> <li>1x Adafruit ESP32 Feather Board</li> <li>1x Breadboard</li> <li>1x Sensor (various types)</li> <li>A bunch of cables</li> <li>A few LED bulbs</li> </ul>"},{"location":"onboarding_electrical/#section-1-overview-of-electrical-parts-and-sensors","title":"Section 1: Overview of Electrical Parts and Sensors","text":""},{"location":"onboarding_electrical/#peristaltic-water-pump","title":"Peristaltic Water Pump","text":"<ul> <li>Function: Delivers water, nutrients, or any liquid solution throughout the hydroponic system.</li> <li>Operation: Compresses and relaxes a tube to create a steady flow of liquid without contamination.</li> <li>Use Case: Controlled delivery of water and nutrients at scheduled intervals.</li> </ul>"},{"location":"onboarding_electrical/#temperature-sensor","title":"Temperature Sensor","text":"<ul> <li>Function: Monitors the temperature within the hydroponics system.</li> <li>Operation: Measures ambient temperature, maintaining optimal growth conditions.</li> <li>Measurement Range: 10 mV/\u00b0C scale factor, 500mV offset (0.5V @ 0\u00b0C).</li> </ul>"},{"location":"onboarding_electrical/#tds-sensor-analog","title":"TDS Sensor (Analog)","text":"<ul> <li>Function: Measures Total Dissolved Solids in water, indicating nutrient concentration.</li> <li>Operation: Monitors nutrient levels in water.</li> <li>Measurement Range: 0 ~ 1000ppm (\u00b110% accuracy).</li> </ul>"},{"location":"onboarding_electrical/#luminance-sensor-analog","title":"Luminance Sensor (Analog)","text":"<ul> <li>Function: Measures light intensity within the system.</li> <li>Operation: Regulates artificial lighting or assesses natural light levels.</li> <li>Measurement Range: 0 - 4095; lower values indicate brighter areas.</li> </ul>"},{"location":"onboarding_electrical/#ph-sensor-i2c","title":"pH Sensor (I2C)","text":"<ul> <li>Function: Monitors pH level of the water.</li> <li>Operation: Ensures pH is within optimal range for nutrient absorption.</li> <li>Measurement Range: .001pH \u2212 14.000pH.</li> </ul>"},{"location":"onboarding_electrical/#humidity-sensor-i2c","title":"Humidity Sensor (I2C)","text":"<ul> <li>Function: Measures humidity levels in the environment.</li> <li>Operation: Maintains ideal humidity for plant growth.</li> <li>Notes: Prevents excess moisture or dry conditions.</li> </ul>"},{"location":"onboarding_electrical/#section-2-adafruit-esp32-feather-board","title":"Section 2: Adafruit ESP32 Feather Board","text":"<p>The Adafruit ESP32 Feather Board is a versatile and powerful microcontroller board, ideal for a variety of DIY projects, especially in hydroponics. It's the brain of your hydroponic system, seamlessly connecting and controlling various sensors and components.</p>"},{"location":"onboarding_electrical/#understanding-the-adafruit-esp32-feather-board","title":"Understanding the Adafruit ESP32 Feather Board","text":"<p>Before diving into the connections, let's understand what makes the ESP32 Feather Board stand out:</p> <ul> <li>Wi-Fi and Bluetooth Capabilities: Allows for wireless communication and remote monitoring of your hydroponic system.</li> <li>Rich Set of I/O Pins: Ample digital and analog pins to connect a variety of sensors and actuators.</li> <li>Low Power Consumption: Ideal for battery-operated or energy-efficient hydroponic setups.</li> <li>Compact Size: Its small form factor makes it easy to integrate into your hydroponic system without taking up much space.</li> </ul>"},{"location":"onboarding_electrical/#tutorial-on-connecting-sensors-to-the-adafruit-esp32","title":"Tutorial on Connecting Sensors to the Adafruit ESP32","text":""},{"location":"onboarding_electrical/#visual-guide","title":"Visual Guide:","text":""},{"location":"onboarding_electrical/#step-by-step-guide","title":"Step-by-Step Guide:","text":"<ol> <li>Identify the I/O Pins (input/output pin): First, familiarize yourself with the I/O pins (the numbers on the board, as seen in the visual diagram as well) on the ESP32 board. Each sensor will connect to these pins for data communication. You don't really need to know what an I/O pin is, right now, just think of it as a communication channel. If you are interested, here is a simple analogy.</li> <li>Start with your sensor (e.g., Temperature Sensor). Locate the VCC, GND, and DATA pins on the sensor.</li> <li>Connect the VCC pin to the 3V3 (3.3V) output on the ESP32.</li> <li>Connect the GND pin to one of the GND (Ground) pins on the ESP32.</li> <li>Connect the DATA pin to a digital or analog input pin on the ESP32, depending on the sensor's output type. All of your onboarding sensors should be analog. Search up the name and brand of your sensor, and the manufacturer should have a document on what pin the device should be connected to. Feel free to message the discord if you cannot find it, but we intentionally left it out so you can practice this process and use these skills on future sensors.</li> <li>Repeat for Additional Sensors: Follow the same process for each sensor you have, ensuring that each sensor's DATA pin connects to a unique input pin on the ESP32.</li> <li>Powering the ESP32 Board: You can power the ESP32 Feather Board via USB or through a battery if your setup is remote.</li> <li>Check Connections: Once all sensors are connected, double-check each connection for correctness and security.</li> </ol>"},{"location":"onboarding_electrical/#additional-resources","title":"Additional Resources:","text":"<ul> <li>Adafruit's Official Guide to ESP32 Feather Board</li> <li>Forum for Troubleshooting ESP32 Connections</li> <li>Video Tutorial on Connecting Various Sensors to ESP32</li> </ul> <p>By following these steps and utilizing the resources provided, you'll be able to successfully connect and configure the sensors with the Adafruit ESP32 Feather Board, laying a solid foundation for your hydroponic system's functionality.</p> <ul> <li>Detailed connection tutorial</li> </ul>"},{"location":"onboarding_electrical/#section-3-coding-for-the-sensors","title":"Section 3: Coding for the Sensors","text":"<p>The sensors provided have analog outputs and are labeled with their names and brands.</p> <ol> <li> <p>To find the test code, start by searching online using the specific brand and model of your sensor. For example, DFRobot provides excellent documentation for their products, such as this documentation for the Gravity Analog TDS Sensor &amp; Meter for Arduino (SKU: SEN0244). You can typically find this information by searching for terms like \"tds sensor dfrobot code.\" This search should lead you to the correct documentation, usually within the first few search results. Remember, the code provided in this example is specific to the DFRobot sensor and SHOULD NOT BE DIRECTLY COPIED for use with a different sensor. Always use the code intended for your specific sensor model.</p> </li> <li> <p>Review the code and highlight any confusing parts. I recommend printing out the code for easier annotation. Bring your annotated version to our next PInT meeting, where we'll go over it together. If you're up for a challenge, try creating documentation for the code and explaining it to the group. This exercise is designed to help us practice understanding and documenting code that has poor documentation (or none at all T_T). It's completely fine if you don't understand everything yet. Just do your best, and we'll discuss it together at the meeting!</p> </li> <li> <p>If you're stuck, feel free to ask for help on our Discord channel.</p> </li> </ol>"},{"location":"onboarding_electrical/#section-4-putting-it-all-together","title":"Section 4: Putting It All Together","text":"<ol> <li>Download PlatformIO from PlatformIO Documentation.</li> <li>Set up your breadboard as described in Section 2.</li> <li>Import the sensor codes onto the Adafruit ESP32 board using PlatformIO.</li> <li>Troubleshoot any issues by revisiting previous sections or asking on Discord.</li> <li>Remember, it's common to encounter challenges at this stage. Keep trying, and don't hesitate to ask for help!</li> </ol>"},{"location":"onboarding_electrical/#section-5-celebrate-your-success","title":"Section 5: Celebrate Your Success","text":"<p>Congratulations on reaching this significant milestone! Once you have successfully configured the sensor to transmit data to your terminal (or any other preferred method), you're ready to integrate it into the larger network. At this point, your sensor is prepared to be connected to the internet through our central communication system.</p> <p>This achievement marks not just a technical accomplishment but also your contribution to setting up a crucial part of the hydroponics system. Your efforts bring us a step closer to creating a more efficient and responsive growing environment.</p> <p>Take a moment to appreciate your hard work and persistence. Remember, every successful connection and configuration you complete is an integral part of the hydroponics journey. Well done!</p> <p>Good luck, and welcome to the exciting world of hydroponics!</p>"},{"location":"packages/","title":"Frontend Installations","text":"<p>You\u2019ll need to install Node.js + npm, React.js, and Prettier. It\u2019s best to consult the documentation at their respective sites, https://nodejs.org/en/download, https://react.dev/learn/installation, and https://prettier.io/docs/en/install.html</p> <p>There may be issues installing Node.js from the default apt repository on Ubuntu. If there\u2019s an error, follow this guide for Node.js installation from source:</p> <p>How to Install ReactJS on Ubuntu Linux and NodeJS installation on Ubuntu</p>"},{"location":"packages/#backend-installations","title":"Backend Installations","text":"<p>You\u2019ll need to install Anaconda, MongoDB (Community), and all of the dependencies specified in the codebase.</p>"},{"location":"packages/#anaconda","title":"Anaconda","text":"<p>To install Anaconda, consult the installation instructions in</p> <p>Automation Onboarding</p>"},{"location":"packages/#mongodb","title":"MongoDB","text":"<p>Follow the instructions on the Mongo website to install according to your computational setup.</p> <p>https://www.mongodb.com/docs/manual/administration/install-community/</p>"},{"location":"packages/#dependencies","title":"Dependencies","text":"<p>Since the application runs on Python, you can install the dependencies using Python\u2019s package manager, pip.</p> <pre><code>~/path-to-dir/hydro-directory$ pip install -r requirements.txt\n</code></pre> <p>Make sure you are in the right directory or this command will not work as intended!</p>"},{"location":"packages/#firmware-installations","title":"Firmware Installations","text":"<p>We do firmware development in PlatformIO. It can be installed into VSCode (recommended) by following the instructions on this page.</p> <p>The IDE can also be directly installed with the download page if you prefer that and are working on Windows.</p>"}]}